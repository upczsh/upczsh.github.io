<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Mybatis-plus</title>
    <url>/2021/04/17/Mybatis-plus/</url>
    <content><![CDATA[<h3 id="Mybatis-plus-（mp-baomidou-com）"><a href="#Mybatis-plus-（mp-baomidou-com）" class="headerlink" title="Mybatis-plus （mp.baomidou.com）"></a>Mybatis-plus （mp.baomidou.com）</h3><ul>
<li>是一个Mybatis 的增强工具</li>
<li>自动实现Mapper CRUD操作 提高数据库开发效率</li>
<li>在Mybatis的基础上只做增强 不做改变</li>
<li>   在类名之前用 注解 @TableName(“…”) 与对应的数据库中的表</li>
<li>   @TableId(type=…) 设置ID是自增还是什么等</li>
<li>   @TableField(“…”) 对应的Mysql中的属性名 若用驼峰命名法自动转换可以不用标注</li>
</ul>
<h3 id="与SSM整合"><a href="#与SSM整合" class="headerlink" title="与SSM整合"></a>与SSM整合</h3><ul>
<li>1.pom引入Mybatis-plus依赖</li>
</ul>
<p><img src="http://81.70.203.9/img/mooc_image/mybatis/baomidouyilai.png" alt="导入依赖"></p>
<ul>
<li>2.Spring XML 更改SqlSessionFactory实现类</li>
</ul>
<p><img src="http://81.70.203.9/img/mooc_image/mybatis/sessionfactory.png" alt="更改实现类"></p>
<ul>
<li>3.mybatis-config.xml 增加MP(Mybatis-plus)分页插件</li>
</ul>
<p><img src="http://81.70.203.9/img/mooc_image/mybatis/mybatis-plus.png" alt="分页插件"></p>
<h3 id="Mybaits-plus-的使用"><a href="#Mybaits-plus-的使用" class="headerlink" title="Mybaits-plus 的使用"></a>Mybaits-plus 的使用</h3><ul>
<li>创建实体类 @TableName/@TableId/@TableField 实现映射</li>
</ul>
<p><img src="http://81.70.203.9/img/mooc_image/mybatis/mybatis1.png" alt="实体类映射"></p>
<ul>
<li>创建Mapper 接口继承BaseMapper 创建Mapper XML</li>
</ul>
<p><img src="http://81.70.203.9/img/mooc_image/mybatis/TestMapper.png" alt="继承自BaseMapper"></p>
<p><img src="http://81.70.203.9/img/mooc_image/mybatis/BaseMapper.png" alt="BaseMapper接口"></p>
<ul>
<li>开发时注入Mapper对象 通过内置API 实现CRUD操作</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringJUnit4ClassRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>locations <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"classpath:applicationContext1.xml"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisPlusTest</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">TestMapper</span> testMapper<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@org</span><span class="token punctuation">.</span>junit<span class="token punctuation">.</span><span class="token class-name">Test</span>
    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Test</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        test<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string">"MybatisPlus 测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        testMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@org</span><span class="token punctuation">.</span>junit<span class="token punctuation">.</span><span class="token class-name">Test</span>
    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">testUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token class-name">Test</span> test <span class="token operator">=</span>   testMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        test<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string">"this is Mybatis plus test !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        testMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token annotation punctuation">@org</span><span class="token punctuation">.</span>junit<span class="token punctuation">.</span><span class="token class-name">Test</span>
    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">testDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        testMapper<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token annotation punctuation">@org</span><span class="token punctuation">.</span>junit<span class="token punctuation">.</span><span class="token class-name">Test</span>
    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">testSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Test</span> <span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Test</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等于判断查询</span>
          queryWrapper<span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//范围查询 大于25的数据</span>
        <span class="token comment">//eq 和 gt 都写 为id等于且大于    默认用and连接</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Test</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> testMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<ul>
<li>@TableName 将实体类与表明映射</li>
<li>@TableId 说明对应属性是表的主键</li>
<li>@TableFieId 设置属性与列名的对应关系</li>
</ul>
<h3 id="BaseMapper接口核心API"><a href="#BaseMapper接口核心API" class="headerlink" title="BaseMapper接口核心API"></a>BaseMapper接口核心API</h3><p><img src="http://81.70.203.9/img/mooc_image/mybatis/BaseMapperAPI.png" alt="BaseMapperAPI"></p>
<p><strong>测试之前要确保依赖的Jar包加入到web应用的依赖中！！ 即Artifacts 中的右侧不允许出现有关Maven的依赖包。都应当加入到Web—INF 目录下 这样才会不会缺少组件</strong></p>
]]></content>
      <categories>
        <category>Mybatis-plus</category>
      </categories>
      <tags>
        <tag>Mybatis-plus</tag>
        <tag>项目相关</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/11/28/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>lc无重复字符的最长子串</title>
    <url>/2021/03/29/lc%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</url>
    <content><![CDATA[<br>

<ul>
<li>滑动窗口，用一个Set来存储元素 利用滑动窗口特性来计算出最终的答案</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">
   <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>   <span class="token comment">// 存储最终的答案</span>
                <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// i代表左指针   right 代表右指针  答案就是right - i +1 </span>
                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        hash<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//移除上一个</span>
                    <span class="token punctuation">&#125;</span>
                    <span class="token keyword">while</span><span class="token punctuation">(</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>len<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>hash<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">//右指针 没有超过最大界限 并且 集合当中没有重复元素 那么 就 一直右移 并在集合中添加此元素</span>
                    <span class="token punctuation">&#123;</span>
                            hash<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            right <span class="token operator">++</span><span class="token punctuation">;</span>      
                    <span class="token punctuation">&#125;</span>
                     ans <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> right<span class="token operator">+</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//存储最终的答案</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">return</span> ans<span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>lc</tag>
        <tag>滑动窗口</tag>
      </tags>
  </entry>
  <entry>
    <title>lc翻转链表</title>
    <url>/2021/03/29/lc%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<ul>
<li><h4 id="非递归写法"><a href="#非递归写法" class="headerlink" title="非递归写法"></a>非递归写法</h4><h5 id="一个是当前指针，一个是前一个指针，通过不断转换进行翻转。"><a href="#一个是当前指针，一个是前一个指针，通过不断转换进行翻转。" class="headerlink" title="一个是当前指针，一个是前一个指针，通过不断转换进行翻转。"></a>一个是当前指针，一个是前一个指针，通过不断转换进行翻转。</h5></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">ListNode</span> curr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token class-name">ListNode</span> pre  <span class="token operator">=</span> head<span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>pre<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                    <span class="token class-name">ListNode</span> temp <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
                      pre<span class="token punctuation">.</span>next <span class="token operator">=</span> curr<span class="token punctuation">;</span>
                        curr <span class="token operator">=</span> pre <span class="token punctuation">;</span>
                    pre <span class="token operator">=</span> temp<span class="token punctuation">;</span>
                
            <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> curr<span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><h4 id="递归版本"><a href="#递归版本" class="headerlink" title="递归版本"></a>递归版本</h4></li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
           
            <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">||</span>head<span class="token punctuation">.</span>next<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> head<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
          <span class="token class-name">ListNode</span> temp <span class="token operator">=</span>   <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
             head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
          head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>lc</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo在个人博客添加音乐</title>
    <url>/2020/12/05/hexo%E5%9C%A8%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90/</url>
    <content><![CDATA[<br>
<br>


<p><strong>1.打开网页版网易云</strong></p>
<p><strong>2.点击自己想加入的音乐</strong><br><img src="http://i1.fuimg.com/730548/59a9131b34ccce87.png"><br><strong>点击生成外链播放器</strong></p>
<p><img src="http://i1.fuimg.com/730548/9846a04b1469d1c4.png"><br><strong>复制这些代码 粘贴到自己本地主题sidebar.swig文件中</strong><br><strong>例如我的地址就如下图片所示</strong><br><img src="http://i2.tiimg.com/730548/fa091c6234305627.png"></p>
]]></content>
      <categories>
        <category>博客相关</category>
      </categories>
      <tags>
        <tag>博客相关</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树的三种遍历(递归，迭代)</title>
    <url>/2021/04/01/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%89%E7%A7%8D%E9%81%8D%E5%8E%86-%E9%80%92%E5%BD%92%EF%BC%8C%E8%BF%AD%E4%BB%A3/</url>
    <content><![CDATA[<h3 id="二叉树的前序遍历"><a href="#二叉树的前序遍历" class="headerlink" title="二叉树的前序遍历"></a>二叉树的前序遍历</h3><ul>
<li><h4 id="二叉树前序遍历按照-根节点-左子树-右子树-的-顺序进行的，也就是根左右。"><a href="#二叉树前序遍历按照-根节点-左子树-右子树-的-顺序进行的，也就是根左右。" class="headerlink" title="二叉树前序遍历按照 根节点 左子树 右子树 的 顺序进行的，也就是根左右。"></a>二叉树前序遍历按照 根节点 左子树 右子树 的 顺序进行的，也就是根左右。</h4></li>
</ul>
<p><img src="http://81.70.203.9/img/myBlogimg/1.png" alt="前序遍历"></p>
<ul>
<li><h4 id="简易记法：将一个节点分为三个边，分别用不同颜色如图表示，从根节点进入从左边开始沿着边进行遍历，由下图可知，路过的红色部分依次为0，1，3，4，7，2，5，8（后面的中序遍历与后续遍历同理！）"><a href="#简易记法：将一个节点分为三个边，分别用不同颜色如图表示，从根节点进入从左边开始沿着边进行遍历，由下图可知，路过的红色部分依次为0，1，3，4，7，2，5，8（后面的中序遍历与后续遍历同理！）" class="headerlink" title="简易记法：将一个节点分为三个边，分别用不同颜色如图表示，从根节点进入从左边开始沿着边进行遍历，由下图可知，路过的红色部分依次为0，1，3，4，7，2，5，8（后面的中序遍历与后续遍历同理！）"></a>简易记法：将一个节点分为三个边，分别用不同颜色如图表示，从根节点进入从左边开始沿着边进行遍历，由下图可知，路过的红色部分依次为0，1，3，4，7，2，5，8（后面的中序遍历与后续遍历同理！）</h4><p><img src="http://81.70.203.9/img/myBlogimg/1.png" alt="前序遍历"></p>
</li>
<li><h4 id="lc递归版本代码："><a href="#lc递归版本代码：" class="headerlink" title="lc递归版本代码："></a>lc递归版本代码：</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
    
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">preorderTraversal</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
           <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token keyword">return</span> <span class="token function">preorder_Traversal</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span>
     <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">preorder_Traversal</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> ans<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> ans <span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根节点</span>
            <span class="token function">preorder_Traversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树</span>
            <span class="token function">preorder_Traversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树</span>
            <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><h4 id="lc迭代版本："><a href="#lc迭代版本：" class="headerlink" title="lc迭代版本："></a>lc迭代版本：</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">		<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">preorderTraversal</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 用一个栈来维护前序顺序</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存放最终答案</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">||</span>root<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> 
            <span class="token punctuation">&#123;</span>
                    <span class="token keyword">while</span><span class="token punctuation">(</span>root<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>
                    <span class="token punctuation">&#123;</span>
                        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//用栈维护前序顺序，也就是可以退到最终节点的父节点。</span>
                        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        root <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span><span class="token comment">//访问过根节点之后访问左子树</span>
                    <span class="token punctuation">&#125;</span>
                    root <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>right<span class="token punctuation">;</span><span class="token comment">//此时此节点已经是叶子节点，左为空，然后让root指向不为空之后的节点的右子树。</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



</li>
</ul>
<h3 id="二叉树中序遍历"><a href="#二叉树中序遍历" class="headerlink" title="二叉树中序遍历"></a>二叉树中序遍历</h3><ul>
<li><h4 id="二叉树前序遍历按照-左子树-根节点-右子树-的-顺序进行的，也就是-左-根-右。"><a href="#二叉树前序遍历按照-左子树-根节点-右子树-的-顺序进行的，也就是-左-根-右。" class="headerlink" title="二叉树前序遍历按照  左子树 根节点 右子树 的 顺序进行的，也就是 左 根 右。"></a>二叉树前序遍历按照  左子树 根节点 右子树 的 顺序进行的，也就是 左 根 右。</h4><img src="http://81.70.203.9/img/myBlogimg/2.png" alt="中序遍历"></li>
<li><h4 id="lc递归版本代码：-1"><a href="#lc递归版本代码：-1" class="headerlink" title="lc递归版本代码："></a>lc递归版本代码：</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token keyword">return</span> <span class="token function">inorder_Traversal</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span>
     <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">inorder_Traversal</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> ans<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> ans <span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token function">inorder_Traversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树</span>
            ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根节点</span>
            <span class="token function">inorder_Traversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树</span>
            <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><h4 id="lc迭代版本：-1"><a href="#lc迭代版本：-1" class="headerlink" title="lc迭代版本："></a>lc迭代版本：</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">	<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存放最终答案</span>
            <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 用一个栈来维护前序顺序</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">||</span>root<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span>root<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//用栈维护中序遍历顺序，也就是可以退到最终节点的父节点。</span>
                    root <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                root <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//保存根节点</span>
                root <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span><span class="token comment">//此时让节点指向右子树。</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> list<span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h3 id="二叉树后序遍历"><a href="#二叉树后序遍历" class="headerlink" title="二叉树后序遍历"></a>二叉树后序遍历</h3><ul>
<li><h4 id="二叉树后序遍历按照-左子树-右子树-根节点-的-顺序进行的，也就是-左-右-根。（图中绿色）"><a href="#二叉树后序遍历按照-左子树-右子树-根节点-的-顺序进行的，也就是-左-右-根。（图中绿色）" class="headerlink" title="二叉树后序遍历按照  左子树 右子树 根节点 的 顺序进行的，也就是 左 右 根。（图中绿色）"></a>二叉树后序遍历按照  左子树 右子树 根节点 的 顺序进行的，也就是 左 右 根。（图中绿色）</h4></li>
</ul>
<p><img src="http://81.70.203.9/img/myBlogimg/3.png" alt="后序遍历"></p>
<ul>
<li><h4 id="lc递归版本代码：-2"><a href="#lc递归版本代码：-2" class="headerlink" title="lc递归版本代码："></a>lc递归版本代码：</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">postorderTraversal</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
              <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token keyword">return</span> <span class="token function">postorder_Traversal</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span>
     <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">postorder_Traversal</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> ans<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> ans <span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token function">postorder_Traversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左子树</span>
            <span class="token function">postorder_Traversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右子树</span>
            ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根节点</span>
            <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><h4 id="lc迭代版本：-2"><a href="#lc迭代版本：-2" class="headerlink" title="lc迭代版本："></a>lc迭代版本：</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">	<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">postorderTraversal</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">TreeNode</span> pre  <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token punctuation">;</span> 
            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">||</span>root<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span>root<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    root <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                root <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">||</span>pre<span class="token operator">==</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token comment">//当前叶子节点没有右节点，那么就把他存入 或者 root的右节点和上一次pre相等时（最右端的情况）</span>
                <span class="token punctuation">&#123;</span>
                        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        pre <span class="token operator">=</span> root<span class="token punctuation">;</span><span class="token comment">//记录状态</span>
                        root<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//防止root等于pre</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">else</span> 
                <span class="token punctuation">&#123;</span>
                        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        root <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> list<span class="token punctuation">;</span> 
        <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
</search>
